Index: homework07/research/network.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import typing as tp\nfrom collections import defaultdict\n\nimport community as community_louvain\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport pandas as pd\n\nfrom homework07.vkapi.friends import get_friends, get_mutual\n\n\ndef ego_network(\n    user_id: tp.Optional[int] = None, friends: tp.Optional[tp.List[int]] = None\n) -> tp.List[tp.Tuple[int, int]]:\n    \"\"\"\n    Построить эгоцентричный граф друзей.\n\n    :param user_id: Идентификатор пользователя, для которого строится граф друзей.\n    :param friends: Идентификаторы друзей, между которыми устанавливаются связи.\n    \"\"\"\n    network = []\n    '''\n    user_friends = get_friends(user_id=user_id)\n    friends = friends if friends else user_friends.items\n    '''\n    connections = get_mutual(user_id, target_uids=friends)\n    for node in connections:\n        for common in node['common_friends']:\n            network.append((node['id'], common))\n    return network\n\n#print()\n\ndef plot_ego_network(net: tp.List[tp.Tuple[int, int]]) -> None:\n    graph = nx.Graph()\n    graph.add_edges_from(net)\n    layout = nx.spring_layout(graph)\n    nx.draw(graph, layout, node_size=10, node_color=\"black\", alpha=0.5)\n    plt.title(\"Ego Network\", size=15)\n    plt.show()\n\n\ndef plot_communities(net: tp.List[tp.Tuple[int, int]]) -> None:\n    graph = nx.Graph()\n    graph.add_edges_from(net)\n    layout = nx.spring_layout(graph)\n    partition = community_louvain.best_partition(graph)\n    nx.draw(graph, layout, node_size=25, node_color=list(partition.values()), alpha=0.8)\n    plt.title(\"Ego Network\", size=15)\n    plt.show()\n\n\ndef get_communities(net: tp.List[tp.Tuple[int, int]]) -> tp.Dict[int, tp.List[int]]:\n    communities = defaultdict(list)\n    graph = nx.Graph()\n    graph.add_edges_from(net)\n    partition = community_louvain.best_partition(graph)\n    for uid, cluster in partition.items():\n        communities[cluster].append(uid)\n    return communities\n\n\ndef describe_communities(\n    clusters: tp.Dict[int, tp.List[int]],\n    friends: tp.List[tp.Dict[str, tp.Any]],\n    fields: tp.Optional[tp.List[str]] = None,\n) -> pd.DataFrame:\n    if fields is None:\n        fields = [\"first_name\", \"last_name\"]\n\n    data = []\n    for cluster_n, cluster_users in clusters.items():\n        for uid in cluster_users:\n            for friend in friends:\n                if uid == friend[\"id\"]:\n                    data.append([cluster_n] + [friend.get(field) for field in fields])  # type: ignore\n                    break\n    return pd.DataFrame(data=data, columns=[\"cluster\"] + fields)\n\n\nif __name__ == \"__main__\":\n    net = ego_network(friends=[761665596, 666096932, 600715664, 8244661])\n    plot_communities(net)\n    communities = get_communities(net)\n    user_friends = get_friends(user_id=None, fields=[\"first_name\", \"last_name\"])\n    print(describe_communities(communities, user_friends.items, fields=[\"first_name\", \"last_name\"]))
===================================================================
diff --git a/homework07/research/network.py b/homework07/research/network.py
--- a/homework07/research/network.py	
+++ b/homework07/research/network.py	
@@ -29,7 +29,6 @@
             network.append((node['id'], common))
     return network
 
-#print()
 
 def plot_ego_network(net: tp.List[tp.Tuple[int, int]]) -> None:
     graph = nx.Graph()
